@page "/UserProfileSearch/{Id}"
@using Employee_Crud_Blazor.Data
@inject UsersService userService
@inject UserProfileService userProfileService
@inject LikesService likesService
@inject NavigationManager NavigationManager


<h3>Search by Age</h3>

<label>Min Age:</label>
<input @bind="minAge" type="number" />

<label>Max Age:</label>
<input @bind="maxAge" type="number" />

<button @onclick="Search">Search</button>


@if (searchPerformed)
{
    @if (userProfileObj != null)
    {
        <h4>Search Results:</h4>
        <ul>
            @foreach (var userProf in userProfileObj)
            {
                if (userProf.UsersId != objUser.Id)
                {
                    <li>@userProf.UserName -
                        Age: @ConvertDateToAge(userProf.BirthDate) -
                        Gender: @userProf.GenderId
                        
                        <button @onclick="() => Like(userProf.UsersId)">Like</button>
                    </li>
                }
            }
        </ul>
    }
}
else
{
    <p>Click the "Search" button to display results.</p>
}

<button type="button" class="btn btn-primary" @onclick="Back">Go back</button>


@code {
    [Parameter]
    public string Id { get; set; }
    private int minAge;
    private int maxAge;
    Users objUser = new Users();
    Likes objLikes = new Likes();
    private List<UserProfile> userProfileObj;
    private List<UserProfile> originalUserProfileObj;
    private bool searchPerformed = false;

    private void Search()
    {
        userProfileObj = originalUserProfileObj
        .Where(p => ConvertDateToAge(p.BirthDate) >= minAge && ConvertDateToAge(p.BirthDate) <= maxAge)
        .ToList();

        searchPerformed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        objUser = await Task.Run(() => userService.GetUserById(Convert.ToInt32(Id)));

        userProfileObj = await Task.Run(() => userProfileService.GetAllUserProfiles());
        originalUserProfileObj = userProfileObj;
    }

    private async void Back()
    {
        NavigationManager.NavigateTo($"/UserHomePage/{objUser.Login}");
    }

    private async void Like(int likeeId)
    {
        objLikes.Likee = likeeId;
        objLikes.Liker = objUser.Id;
        objLikes.Status = 1;
        await likesService.AddNewLikes(objLikes);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private int ConvertDateToAge(DateTime birthdate)
    {
        DateTime today = DateTime.Now;
        int age = today.Year - birthdate.Year;

        if (birthdate.Date > today.AddYears(-age))
        {
            age--;
        }

        return age;
    }
}
